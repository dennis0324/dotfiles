---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true

  pre_tasks:
    - name: Load Variable Files
      include_vars: "{{ item }}"
      with_first_found:
        - "vars/install_{{ ansible_os_family }}_packages.yml"

    - name: Load Variable Files
      include_vars: "vars/install_default_packages.yml"

    - name:
      set_fact:
        total_packages: "{{ spe_packages + default_packages }}"

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Gather the package facts...
      ansible.builtin.package_facts:
        manager: auto

    - name: Gathering services...
      service_facts:

    - name: Checking using bash
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
      register: current_user

    - name: Check installed packages
      set_fact:
        uninstalled_packages: "{{ uninstalled_packages | default([]) + [ item ]}}"
      when:
        not ((ansible_facts.packages | dict2items | selectattr('key','in',item)) or
        (ansible_facts.packages | dict2items | selectattr('key','match',item)))
      loop: "{{ total_packages}}"

    - name: uninstalled packages
      debug:
        msg: "{% if uninstalled_packages is defined %} {{ uninstalled_packages }} {% else %}no package to update{% endif %}"

    - name: "Install packages..."
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: "{{ uninstalled_packages }}"
      when: uninstalled_packages is defined

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh
      when: current_user['shell'] != '/usr/bin/zsh'

    - name: Start ly Service
      systemd:
        name: ly
        state: "started"
        enabled: true
      when: ansible_facts.services['ly.service'] is defined and ansible_facts.services['ly.service'].state != 'running' and ansible_distribution is match("MacOS")
